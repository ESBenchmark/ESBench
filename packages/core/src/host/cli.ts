import { argv, cwd } from "process";
import { resolve } from "path";
import { pathToFileURL } from "url";
import yargs from "yargs";
import { hideBin } from "yargs/helpers";
import { ESBenchHost, report } from "./host.js";
import { ESBenchConfig } from "./config.js";

process.title = "node (esbench)";

async function loadConfig(path?: string) {
	let url = resolve(cwd(), path ?? "esbench.config.js");
	url = pathToFileURL(url).toString();
	try {
		return (await import(url)).default;
	} catch (e) {
		if (path || e.code !== "ERR_MODULE_NOT_FOUND") {
			throw e;
		}
		return {} as ESBenchConfig;
	}
}

const program = yargs(hideBin(argv))
	.command("report <files...>", "Generate report from results", {
		config: {
			type: "string",
			description: "Use specified config file",
		},
		files: {
			type: "string",
			description: "Result file generated by rawReporter to load",
			array: true,
			demandOption: true,
		},
	}, async args => {
		const { config, files } = args;
		return report(await loadConfig(config), files);
	})
	.command("*", "Run benchmark", {
		config: {
			type: "string",
			description: "Use specified config file",
			default: "esbench.config.js",
		},
		file: {
			type: "string",
			description: "Run only suite that contains the value in their paths",
		},
		builder: {
			type: "string",
			description: "Limit the benchmarking to use certain builder which name matching the Regex pattern",
		},
		executor: {
			type: "string",
			description: "Limit the benchmarking to use certain executor which name matching the Regex pattern",
		},
		name: {
			type: "string",
			description: "Run benchmark with names matching the Regex pattern",
		},
		shared: {
			type: "string",
			description: "Execute suites in a specified shard",
		},
	}, async args => {
		const { config, shared, ...filter } = args;
		return new ESBenchHost(await loadConfig(config)).run(filter, shared);
	});

program.version(false).strict().showHelpOnFail(false).parseAsync();
