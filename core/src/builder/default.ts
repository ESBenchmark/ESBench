import { writeFileSync } from "node:fs";
import { join } from "node:path";
import { Builder, toSpecifier } from "../host/toolchain.js";

const template = `\
// This chunk is generated by ESBench's builder.
import { runAndSend } from "esbench";

const suites = {__IMPORTS__\n};

const doImport = file => suites[file]();

export default function (post, files, pattern) {
	return runAndSend(post, doImport, files, pattern);
}`;

/**
 * Generate entry code for builder, use dynamic imports for files.
 *
 * Each file create an import with string literal so that it can be statically analyzed.
 *
 * @param files List of modules to add to the build.
 * @param parent Folder of the importer, default is CWD.
 */
export function simpleLoader(files: string[], parent = "") {
	let imports = "";
	for (const file of files) {
		const specifier = toSpecifier(file, parent);
		imports += `\n\t"${file}": () => import("${specifier}"),`;
	}
	return template.replace("__IMPORTS__", imports);
}

/**
 * Although no code transformation is needed, it is still necessary
 * to create an entry module according to ESBench conventions.
 */
export default <Builder>{
	name: "None",
	build(outDir: string, files: string[]) {
		const code = simpleLoader(files, outDir);
		writeFileSync(join(outDir, "index.js"), code);
	},
};
